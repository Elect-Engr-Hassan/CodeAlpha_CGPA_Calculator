#include <iostream>
#include <iomanip>  // For formatted output
using namespace std;

// Function to convert letter grades to grade points
double getGradePoint(string grade) {
    if (grade == "A+") return 4.3;
    if (grade == "A") return 4.0;
    if (grade == "A-") return 3.7;
    if (grade == "B+") return 3.3;
    if (grade == "B") return 3.0;
    if (grade == "B-") return 2.7;
    if (grade == "C+") return 2.3;
    if (grade == "C") return 2.0;
    if (grade == "C-") return 1.7;
    if (grade == "D+") return 1.3;
    if (grade == "D") return 1.0;
    if (grade == "D-") return 0.7;
    if (grade == "F") return 0.0;
    return -1; // Invalid grade
}

int main() {
    string name, roll, reg, semester;
    int numSubjects;
    double totalGradePoints = 0, totalCredits = 0;

    // Input student details
    cout << "Enter Student Name: ";
    getline(cin, name);
    cout << "Enter Roll Number: ";
    cin >> roll;
    cout << "Enter Registration Number: ";
    cin >> reg;
    cout << "Enter Semester: ";
    cin >> semester;
    cout << "Enter Number of Subjects: ";
    cin >> numSubjects;

    // Arrays to store subject details for result card
    string subjects[numSubjects], grades[numSubjects];
    int credits[numSubjects];

    // Subject details input
    for (int i = 0; i < numSubjects; i++) {
        cin.ignore(); // Prevents input skipping
        cout << "\nEnter Subject " << i + 1 << " Name: ";
        getline(cin, subjects[i]);

        // Loop until valid grade is entered
        while (true) {
            cout << "Enter Grade (A+, A, A-, B+, etc.): ";
            cin >> grades[i];

            double gradePoint = getGradePoint(grades[i]);
            if (gradePoint != -1) { // Valid grade
                cout << "Enter Credit Hours: ";
                cin >> credits[i];

                totalGradePoints += (gradePoint * credits[i]);
                totalCredits += credits[i];
                break; // Exit the loop
            } else {
                cout << "Invalid grade! Please enter a valid grade (A+, A, B+, etc.).\n";
            }
        }
    }

    // Calculate GPA for the current semester
    double currentGPA = totalGradePoints / totalCredits;

    // Ask for previous semester details
    double previousCGPA, previousCredits;
    cout << "\nEnter your previous CGPA: ";
    cin >> previousCGPA;
    cout << "Enter total credit hours of all previous semesters: ";
    cin >> previousCredits;

    // Calculate new CGPA
    double totalCumulativeGradePoints = (previousCGPA * previousCredits) + (currentGPA * totalCredits);
    double totalCumulativeCredits = previousCredits + totalCredits;
    double CGPA = totalCumulativeGradePoints / totalCumulativeCredits;

    // Display student information
    cout << "\n===== Student Result Summary =====\n";
    cout << "Name: " << name << "\nRoll Number: " << roll 
         << "\nRegistration Number: " << reg << "\nSemester: " << semester << endl;
    cout << "----------------------------------------------------\n";

    // Display subject-wise result (Result Card)
    cout << left << setw(30) << "Subject" 
         << setw(10) << "Grade" 
         << setw(15) << "Credit Hours" << endl;
    cout << "----------------------------------------------------\n";
    
    for (int i = 0; i < numSubjects; i++) {
        cout << left << setw(30) << subjects[i] 
             << setw(10) << grades[i] 
             << setw(15) << credits[i] << endl;
    }

    cout << "----------------------------------------------------\n";
    cout << "Total Credit Hours (This Semester): " << totalCredits << endl;
    cout << "GPA (This Semester): " << fixed << setprecision(2) << currentGPA << endl;
    cout << "----------------------------------------------------\n";
    cout << "Total Credit Hours (Overall): " << totalCumulativeCredits << endl;
    cout << "Cumulative GPA (CGPA): " << fixed << setprecision(2) << CGPA << endl;

    return 0;
}
